#
# This is free software, lisence use MIT.
# 
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# Copyright (C) 2020 KFERMercer <KFER.Mercer@gmail.com>
# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#
#HLK-MT7628N

name: SkyMusic-引入外部包-V1.0

on:
  push:
    branches: 
      - master
  schedule:
    - cron: 0 20 * * *
  release:
    types: [published]
    
jobs:

  build_openwrt:

    name: Build OpenWrt firmware

    runs-on: ubuntu-latest

    if: github.event.repository.owner.id == github.event.sender.id

    steps:

      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* || true
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig libtinfo5
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean

          # sudo mkdir -p -m 777 /mnt/openwrt/bin /mnt/openwrt/build_dir/host /mnt/openwrt/build_dir/hostpkg /mnt/openwrt/dl /mnt/openwrt/feeds /mnt/openwrt/staging_dir
          # ln -s /mnt/openwrt/bin ./bin
          # mkdir -p ./build_dir
          # ln -s -f /mnt/openwrt/build_dir/host ./build_dir/host
          # ln -s -f /mnt/openwrt/build_dir/hostpkg ./build_dir/hostpkg
          # ln -s /mnt/openwrt/dl ./dl
          # ln -s /mnt/openwrt/feeds ./feeds
          # ln -s /mnt/openwrt/staging_dir ./staging_dir

          df -h
          
      - name: 自定义插件
        run: |
            cd package
            mkdir openwrt-package
            cd openwrt-package
            git clone https://github.com/skylunwen/openwrt-plus-backup.git

      - name: Update feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a             

      - name: Generate configuration file
        run: |
          rm -f ./.config*
          touch ./.config

          #
          # 在 cat >> .config <<EOF 到 EOF 之间粘贴你的编译配置, 需注意缩进关系
          # 例如:


          # 编译x64固件:
          cat >> .config <<EOF
          CONFIG_TARGET_ramips=y
          CONFIG_TARGET_ramips_mt76x8=y
          CONFIG_TARGET_ramips_mt76x8_DEVICE_hilink_hlk-7628n=y
          EOF

          # 固件压缩:
          cat >> .config <<EOF
          CONFIG_TARGET_IMAGES_GZIP=y
          CONFIG_KERNEL_BUILD_USER="HLK-MT7628N"
          CONFIG_KERNEL_BUILD_DOMAIN="SkyMusic"
          EOF

          # 编译UEFI固件:
          # cat >> .config <<EOF
          # CONFIG_EFI_IMAGES=y
          # EOF

          cat >> .config <<EOF
          CONFIG_LIBCURL_COOKIES=y
          CONFIG_LIBCURL_FILE=y
          CONFIG_LIBCURL_FTP=y
          CONFIG_LIBCURL_HTTP=y
          CONFIG_LIBCURL_NO_SMB="!"
          CONFIG_LIBCURL_OPENSSL=y
          CONFIG_LIBCURL_PROXY=y
          CONFIG_PACKAGE_6in4=y
          CONFIG_PACKAGE_alsa-lib=y
          CONFIG_PACKAGE_alsa-ucm-conf=y
          CONFIG_PACKAGE_alsa-utils=y
          CONFIG_PACKAGE_avahi-dbus-daemon=y
          CONFIG_PACKAGE_boost=y
          CONFIG_PACKAGE_dbus=y
          CONFIG_PACKAGE_glib2=y
          CONFIG_PACKAGE_gstreamer1-libs=y
          CONFIG_PACKAGE_ip6tables=y
          CONFIG_PACKAGE_ipv6helper=y
          CONFIG_PACKAGE_jsoncpp=y
          CONFIG_PACKAGE_kmod-ac97=y
          CONFIG_PACKAGE_kmod-hid=y
          CONFIG_PACKAGE_kmod-hid-generic=y
          CONFIG_PACKAGE_kmod-input-core=y
          CONFIG_PACKAGE_kmod-input-evdev=y
          CONFIG_PACKAGE_kmod-ip6tables=y
          CONFIG_PACKAGE_kmod-ipt-nat6=y
          CONFIG_PACKAGE_kmod-iptunnel=y
          CONFIG_PACKAGE_kmod-iptunnel4=y
          CONFIG_PACKAGE_kmod-nf-ipt6=y
          CONFIG_PACKAGE_kmod-nf-nat6=y
          CONFIG_PACKAGE_kmod-nf-reject6=y
          CONFIG_PACKAGE_kmod-nls-base=y
          CONFIG_PACKAGE_kmod-regmap-core=y
          CONFIG_PACKAGE_kmod-sit=y
          CONFIG_PACKAGE_kmod-sound-core=y
          CONFIG_PACKAGE_kmod-sound-soc-core=y
          CONFIG_PACKAGE_kmod-usb-audio=y
          CONFIG_PACKAGE_kmod-usb-core=y
          CONFIG_PACKAGE_kmod-usb-hid=y
          CONFIG_PACKAGE_kmod-usb-ohci=y
          CONFIG_PACKAGE_lame-lib=y
          CONFIG_PACKAGE_libao=y
          CONFIG_PACKAGE_libattr=y
          CONFIG_PACKAGE_libavahi-client=y
          CONFIG_PACKAGE_libavahi-compat-libdnssd=y
          CONFIG_PACKAGE_libavahi-dbus-support=y
          CONFIG_PACKAGE_libbz2=y
          CONFIG_PACKAGE_libcap=y
          CONFIG_PACKAGE_libconfig=y
          CONFIG_PACKAGE_libcurl=y
          CONFIG_PACKAGE_libdaemon=y
          CONFIG_PACKAGE_libdbus=y
          CONFIG_PACKAGE_libexpat=y
          CONFIG_PACKAGE_libfaad2=y
          CONFIG_PACKAGE_libffi=y
          CONFIG_PACKAGE_libffmpeg-audio-dec=y
          CONFIG_PACKAGE_libflac=y
          CONFIG_PACKAGE_libfmt=y
          CONFIG_PACKAGE_libgst1check=y
          CONFIG_PACKAGE_libgst1controller=y
          CONFIG_PACKAGE_libgst1net=y
          CONFIG_PACKAGE_libgstreamer1=y
          CONFIG_PACKAGE_libid3tag=y
          CONFIG_PACKAGE_libltdl=y
          CONFIG_PACKAGE_libmad=y
          CONFIG_PACKAGE_libmicrohttpd-no-ssl=y
          CONFIG_PACKAGE_libmms=y
          CONFIG_PACKAGE_libmpdclient=y
          CONFIG_PACKAGE_libncurses=y
          CONFIG_PACKAGE_libnpupnp=y
          CONFIG_PACKAGE_libogg=y
          CONFIG_PACKAGE_libopus=y
          CONFIG_PACKAGE_libpopt=y
          CONFIG_PACKAGE_libshout=y
          CONFIG_PACKAGE_libsndfile=y
          CONFIG_PACKAGE_libsoxr=y
          CONFIG_PACKAGE_libstdcpp=y
          CONFIG_PACKAGE_libupnp=y
          CONFIG_PACKAGE_libupnpp=y
          CONFIG_PACKAGE_libvorbis=y
          CONFIG_PACKAGE_libvorbisidec=y
          CONFIG_PACKAGE_libxml2=y
          CONFIG_PACKAGE_luci-app-airplay2=y
          CONFIG_PACKAGE_luci-app-shairplay=y
          #CONFIG_PACKAGE_luci-app-shairport=y
          # CONFIG_PACKAGE_luci-app-unblockmusic is not set
          CONFIG_PACKAGE_luci-i18n-airplay2-zh-cn=y
          CONFIG_PACKAGE_luci-proto-ipv6=y
          CONFIG_PACKAGE_luci-theme-netgear=y
          CONFIG_PACKAGE_madplay=y
          CONFIG_PACKAGE_mpd-full=y
          CONFIG_PACKAGE_odhcp6c=y
          CONFIG_PACKAGE_odhcp6c_ext_cer_id=0
          CONFIG_PACKAGE_odhcpd-ipv6only=y
          CONFIG_PACKAGE_odhcpd_ipv6only_ext_cer_id=0
          CONFIG_PACKAGE_pulseaudio-daemon=y
          CONFIG_PACKAGE_shairplay=y
          CONFIG_PACKAGE_shairport-sync-openssl=y
          #CONFIG_PACKAGE_shairport=y
          CONFIG_PACKAGE_terminfo=y
          CONFIG_PACKAGE_upmpdcli=y
          CONFIG_PACKAGE_yajl=y
          CONFIG_boost-compile-visibility-hidden=y
          CONFIG_boost-runtime-shared=y
          CONFIG_boost-static-and-shared-libs=y
          CONFIG_boost-variant-release=y
          CONFIG_PACKAGE_ipset=y
          CONFIG_PACKAGE_libipset=y
          CONFIG_PACKAGE_libmnl=y
          CONFIG_PACKAGE_openwrt-plus-backup=y
          EOF

          # 取消编译VMware镜像以及镜像填充 (不要删除被缩进的注释符号):
          # cat >> .config <<EOF
          # # CONFIG_TARGET_IMAGES_PAD is not set
          # # CONFIG_VMDK_IMAGES is not set
          # EOF

          # 
          # ========================固件定制部分结束========================
          # 

          sed -i 's/^[ \t]*//g' ./.config
          make defconfig

      - name: Make download
        run: |
          make download -j8 || make download -j1 V=s
          rm -rf $(find ./dl/ -size -1024c)
          df -h

      - name: Compile firmware
        run: |
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h ./ --max-depth=1
          du -h /mnt/openwrt/ --max-depth=1 || true

      - name: Prepare artifact
        run: |
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/

      - name: Deliver buildinfo
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_buildinfo
          path: ./artifact/buildinfo/

      - name: Deliver package
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_package
          path: ./artifact/package/

      - name: Deliver firmware
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_firmware
          path: ./bin/targets/

      - name: Upload release asset
        if: github.event == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.YOURTOKEN }}
          file: ./artifact/firmware/*
          tag: ${{ github.ref }}
          file_glob: true
